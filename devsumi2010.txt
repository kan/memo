Developers Summit2010
2010/02/19
目黒雅叙園

* 開始前

- 会場は椅子オンリー。無論電源なし 
- X200の標準のバッテリモードは画面暗すぎず明るすぎずでなかなか見易いい
- 俺的には膝の上で使うのに丁度良いサイズ
- 打感は最高
- トラックポイントも最高
- 今日はバッテリー稼動チェックも兼ねてる
- スタート前の時点ではWiMAXは普通に繋がってそこそこ(2,3Mbps)速度出てる

* OpenSocial ケータイGame戦国時代

- 世界のTKSKキターーーーー
-- E会場のセミナーをセッティングしたのがtakesakoさんらしい
-- web関連の内容になってるとのこと
-- そういや、今日見る予定のセッションは大体Eだなw
-- takesakoさんのコロプラ厨カミングアウト

- mixi
-- 山下さん(id:weboo)
-- mixiのサービス説明から
-- 1800万人以上会員がいて、1700万人が1回以上利用してる
-- モバイルのPVが220億/月
-- 男女比はほぼ同数で若干女性が多い
-- アプリの話へ
-- モバイルは380くらいアプリがあるみたい
-- サン牧紹介されてる
-- 「おみせやさん」というモバイルアプリが会員急増中らしい
-- アプリ提供を始めた結果、PVが倍に増え、ユーザのアクティブ率が向上
-- mixiアプリだけでなく、mixi connectのほうも頑張る
-- 同じアプリをPC/モバイルの両方で使える点を強調
-- mixiアプリの技術的な仕組みをざっくり
-- 各種APIの解説
-- 流行りそうなアプリについて
-- ユーザー同士がなにかする要素のあるアプリ
-- 紹介編ということもあってか、かなり基礎的な内容だった

- mbga
-- zigorouさん
-- セッティングに戸惑ってるw
-- まずはサービス紹介
-- 1600万人、6割が男性で、成人が7割(上がった)
-- PVは月間450億
-- ソーシャルアプリ提供後はやはりPVが増えた
-- request毎にAPI用のtokenを発行している
-- 開発環境(sandbox)と、開発者向け管理画面がある
-- アプリは現在101
-- PVその他は増えてるけど現状非公開
-- 人気ゲームにギャル文字はありませんでしたw
-- こいけん、ゲームスタジオ物語とかが紹介されてる
-- 頭一つ抜けたゲームはまだ無い
-- モンスターアプリが出ればもっと露骨に動線貼るよ!(TOPとかから)
-- 技術的な仕組みをざっくり(mixiよりもうちょい技術者寄り)
-- Proxy Modelの詳細解説
-- OAuthについてはライブラリを使って下さいとのこと
-- タイムアウトし過ぎるとメンテ落ちするよー
-- mixiとの比較
-- Proxy Modelを採用したのはセキュリティ的な見地から
-- 独自APIがそれぞれにあり、OpenSocialのAPIもパラメータがちょっと違う
-- Payment APIなどはなるべく揃えるようにしてる
-- 移植容易性には留意している
-- mixiとはユーザー層もユーザの繋がりかたも違うので共存できると思っている
-- モバゲーはバーチャルを起点とするゲーム内の緩い繋がり
-- ゲーム用のAvatarコーディネートを用意できるようになる
-- Life Cycle Eventsはmixiの実装とほぼ同じっぽい
-- (オフレコ)iアプリとかiPhoneアプリとかからも利用できる仕組みを入れたい
-- (オフレコ)SDKの提供も
-- (オフレコ)モバゲーconnect
-- (オフレコ)Smart Phone, PC向け(JS API)も
-- (オフレコ)Open Social Template, OpenSocial用のマークアップ言語
-- (オフレコ)SAP側のインフラ増強が不要に？
-- DeNAのエンジニアブログ始まるよー
-- DeNAの勉強会も始まるよ(3/16)


- 午前2コマ目のセッションとってなかったw

* 3周遅れのXP -僕とドワンゴのXP-

- この会議室だとWiMAX絶不調……
- 使えるLANサービスも見つからんでござる
- なるほど、この辺がWiMAXの課題か……
- Yoshioriさんだー
- 3周目→(1)方向性が提示される→(2)日本で最初に取り組む→(3)ぼちぼちやろう
- なので、タイトルは正しくは2周遅れw
- 車輪の再発明しないようにしようぜ
- 開発プロセスを再発明せずに、先人の成果を生かしていこう
- 原典にあたれって言うやつは老害
- XPの4つの価値
-- コミュニケーション
-- シンプルさ
-- フィールドバック
-- 勇気
- コミュニケーション→おやつ神社
-- 社内におやつを置いてコミュニケーションの場を作る
- TDDの目的はテストではない
- TDDは開発手法
- 開発のゴールに向かうにはふたつの道がある
-- 汚なくて動かない→綺麗だけど動かない→綺麗で動く
-- 汚なくて動かない→汚いけど動く→綺麗で動く
-- TDDのアプローチは後者(前者のアプローチは無理じゃね？)
- 如何にテストを利用して開発していくかがTDDのポイント
- 自分の解決すべき問題を小さく明白にすることが出来る
-- テストを通すことにフォーカスできる
- TDDという開発手法自体が品質UPに貢献する
- UnitTestになってしまい、網羅的にテストを書いてしまう
-- TestFirstにこだわりすぎ
-- 不安なところをテストするのが大事
- カバレッジ、QA、テスト計画etcは別物
- 社内でTDD写経会を実施
-- WEB+DBのTDD特集のコードを写経
-- 社内のプロジェクトチームにTDDを浸透
- ペアプロ重要
-- コードの共有
-- コードはチームのもの
-- コードの批判=人格批判ではない、と思わないように
- 新人に学んだこと、コードをブログに書かせている
-- コードを晒して評価を受けることに慣れさせる
- CI
-- continuous integration
-- 継続テスト
-- 1日1回→を5分に1回にしてみた
-- SLOW-TEST問題発生
--- テストにかかる時間が増えるので、テスト実行を飛ばすようになるスパイラル
--- テスト時にon memory DBを使ったり、データ初期化を適宜skipして高速化
--- 根本的にはmockを用意するのがベター
- 見積と計画
-- cojiさんktkr
-- 「アジャイルな見積りと計画づくり」を読んだ
-- 要件をユーザーストーリーに分割する
-- プランニングポーカーをやる
--- 1,2,3,5,8,(?,∞)のカードでやるポーカー
--- 平均的な時間のかかるストーリーを5とする
--- ストーリーの時間を全員一斉にカードで提示
--- 齟齬があったら根拠を尋ねていく
--- またカードを提示して揃うまで繰り返し
--- 実際に作業してみて、期間毎のポイント消化量がわかる
--- それを基準にして見積る
-- ストーリーから作業する時には、更に実際のタスクに分割する
--- タスクを付箋に書いて、ボードに担当者別に貼る
- バーンダウン
-- 完了したタスクの分だけ数字を減らしていく
-- 突発作業は右上がりのグラフで同時に書いていく
-- 正直に書くのが大事(FF13が発売したら遅れた、とかもw)
- 現実にアジャイルに対応する
-- Excelで入力項目の仕様書を書かないといけない→そのsheetを読み込んでバリデーション
-- excel2db的なものがあると色々と便利
-- IRCのサマリーをメール送信
-- IRCにチケットID貼るとタイトルを表示するbotが
- まずは個人的にXP,TDDを導入すれば良いんじゃないか
-- 個人→チーム→会社→社会


* クラウド開発に約立つOSSあれこれ

- 朝一の会場に戻ってきた。こっちだとWiMAX繋がる
- 世の中のシステムが即クラウドになるわけではない→既存のシステムがあるから
- どうやって連携するか
- オンプレミス連携(既存システムとクラウドの連携)
- クラウド間の連携
- クラウド環境での共同開発における問題→IDやシークレットキー的なものの共有が必要になる
- クラウド環境でのテストをどうするか
-- クラウドのほうでテストをすると、それだでお金がかかる
- クラウド環境へのデプロイをどうするか
- rforceとかwakameとかpuppetとか
- Atomosphere -> GAEで非同期処理を実現する
- Eucalyptus -> Amazon EC2とかS3とかの互換サービスを提供する



* Google日本語入力を支える情報処理技術

- こっちの会議室もWiMAX入る。やっぱりさっきの部屋が特殊らしい
- ぼちぼち電池がやばい。まあ5時間は保ってるので及第点か
- Input Methodは複雑なソフトウエア
-- ローマ字入力、各種キーバインド、サジェスト、辞書登録、スペルチェック、英字変換
- IMは一般的にはDLLで実装される(on Windows OS)
-- あらゆるアプリケーションでDLLはロードされる
-- IMがクラッシュすると辞書データとアプリもクラッシュする
-- アプリがクラッシュするとIMも落ちて辞書も壊れる
-- 絶対に落ちてはいけないソフトウエア
- IM DLLはセキュリティリスクの高い画面で実行されるケースがある
-- レジストリエディタとかログイン画面とか
-- IMは聖域として不問にされてきた

- Google IMEでは
-- クラッシュしても平気にする
- IMのDLLを小さく、最低限に
-- 他の機能は別プロセスにしてプロセス間通信でやりとり(ステートレス)
-- それでも、結構DLLでやらないといけない
- 機能が分離されているので、起動しながらのupdateができる
-- 破られても平気にする
-- 変換機能をsandboxで実行
-- 乗っとっても何も出来ない

- 辞書データの作り方
- ウェブ辞書
-- ウェブから高頻度で出現する単語、フレーズを抽出
-- 読みは単漢字辞書の読みを確率モデルで組み合わせて推測する
--- 百舌鳥、みたいな当て字には弱い
-- もしかして機能なども動員(読みとか)
-- とにかく自動
- 言語モデル
-- 教科書的な作り方。データ量で差別化
-- ウェブ辞書のデータも取り込んでいる
- 辞書検索
-- KVS的なモデルでは駄目
-- TRIEのLOUDSという方式を使っている。速度よりもスペース効率が良い方法
-- 既存の圧縮アルゴリズムの組み合わせで70MB→35MBまで圧縮


* AWSの話

- ここからはX200の電源が切れたので紙にメモした分から転載
- 次のIDCはシンガポールに出来るらしい
- 東京の予定はまだないので誘致に興味のある人は声かけて欲しいwとのこと
- SQS(AWSで提供されるsimpleなqueue service)
- Cloud FUSION (PHPによるAWS APIのライブラリ。中の人謹製)


* HTML5
- XHTMLの失敗
- 機能の拡張と安定性の向上
- canvas, video, footer
- 表現を簡潔に出来るようにしつつ、後方互換性を意識
- フォームの拡張
-- input要素のtypeにemail,range,dateなどなど
-- range等はUIも含めて定義される
-- client side validation
-- autofocus, placeholderなども仕様化
- canvas
-- 2D描画に特化。高速
-- bespin, sketchpadなどのサービスデモが
- audio, video
- Web Storage
- Web Workers
- app cache, online, offline event
- Web Sockets (双方向通信が可能に)
- プラットフォームの安定化
-- クロスブラウザ問題の改善


